#on:
#  push:
#    branches:
#      - main
#jobs:
#  # gh actions do not currently allow one action to trigger another, hence, we must handle all master tasks here:
#  package:
#    if: "!contains(github.event.commits[0].message, '[ci skip]')"
#    strategy:
#      matrix:
#        service:
#          - noni
#          - jackfruit
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v2.3.0
#        with:
#          java-version: "16"
#          cache: "maven"
#          distribution: "zulu"
#
#      - name: Retrieving version
#        run: |
#          VERSION_FORMAT='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}'
#          mvn -q build-helper:parse-version versions:set -DnewVersion="${VERSION_FORMAT}" versions:commit
#          echo "VERSION=$(grep \<version\> pom.xml | xargs | awk -F '[<>]' '{ print $3}')" >> $GITHUB_ENV
#
#      - name: Building
#        run: |
#          mvn -q build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion} versions:commit
#          mvn -B -q -am -pl ${{matrix.service}} package -DskipTests
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Login to Amazon ECR
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        env:
#          AWS_ACCOUNT_ID: ${{ secrets.AWS_PROD_ACCOUNT_ID }}
#        run: |
#          echo "###################  using version: v${{env.VERSION}} ###################"
#          cd ${{matrix.service}} || exit
#          docker build -t ${{matrix.service}} .
#          docker tag ${{matrix.service}}:latest "${{ secrets.AWS_PROD_ACCOUNT_ID }}".dkr.ecr.us-east-1.amazonaws.com/${{matrix.service}}:v${{env.VERSION}}
#          docker tag ${{matrix.service}}:latest "${{ secrets.AWS_PROD_ACCOUNT_ID }}".dkr.ecr.us-east-1.amazonaws.com/${{matrix.service}}:latest
#          docker push "${{ secrets.AWS_PROD_ACCOUNT_ID }}".dkr.ecr.us-east-1.amazonaws.com/${{matrix.service}}:v${{env.VERSION}}
#          docker push "${{ secrets.AWS_PROD_ACCOUNT_ID }}".dkr.ecr.us-east-1.amazonaws.com/${{matrix.service}}:latest
#
#
#      - name: Logout of Amazon ECR
#        if: always()
#        run: docker logout ${{ steps.login-ecr.outputs.registry }}
#
#  record-release:
#    if: "!contains(github.event.commits[0].message, '[ci skip]')"
#    runs-on: ubuntu-latest
#    needs: [ package ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v2
#        with:
#          java-version: "16"
#          cache: "maven"
#          distribution: "zulu"
#      - uses: actions/cache@v1
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#      - name: Retrieving version
#        run: |
#          VERSION_FORMAT='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}'
#          mvn -q build-helper:parse-version versions:set -DnewVersion="${VERSION_FORMAT}" versions:commit
#          echo "VERSION=$(grep \<version\> pom.xml | xargs | awk -F '[<>]' '{ print $3}')" >> $GITHUB_ENV
#
#      - name: Releasing
#        run:  |
#          echo "###################  using version: v$VERSION ###################"
#
#          # tag repo
#          git config --global user.email "ci@uvasoftware.com"
#          git config --global user.name "Github Actions"
#          git tag -a v"${VERSION}" -m "Release by Github Actions v${{ env.VERSION }}"
#          git push origin v"${{ env.VERSION }}"
#
#      - name: Bumping version
#        run: |
#          # bumping it to a new snapshot release:
#          # shellcheck disable=SC2016
#          VERSION_FORMAT='${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.${parsedVersion.incrementalVersion}-SNAPSHOT'
#          mvn -q build-helper:parse-version versions:set -DnewVersion="${VERSION_FORMAT}" versions:commit
#
#          VERSION=$(grep \<version\> pom.xml | xargs | awk -F '[<>]' '{ print $3}')
#
#          echo "next version is: $VERSION"
#
#          #commit version change
#          git status
#          git commit -a -m "bump to ${VERSION} [ci skip]"
#          git push origin main
#
#  deploy-staging-us:
#    if: "!contains(github.event.commits[0].message, '[ci skip]')"
#    strategy:
#      matrix:
#        region:
#          - us-east-1
#        service:
#          - jackfruit
#          - noni
#    env:
#      ENVIRONMENT: staging
#    runs-on: ubuntu-latest
#    needs: [ record-release ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v2
#        with:
#          java-version: "16"
#          cache: "maven"
#          distribution: "zulu"
#      - uses: actions/cache@v1
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
#          aws-region: ${{ matrix.region }}
#
#      - name: Download task definition
#        env:
#          TASK_DEFINITION: ${{matrix.service}}-${{env.ENVIRONMENT}}
#        run: |
#          aws ecs describe-task-definition --task-definition ${TASK_DEFINITION} --query taskDefinition > task-definition.json
#
#      - name: Retrieve image
#        id: retrieve-image
#        run: |
#          VERSION_FORMAT='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}'
#          mvn -q build-helper:parse-version versions:set -DnewVersion="${VERSION_FORMAT}" versions:commit
#
#          TAG=$(grep \<version\> pom.xml | xargs | awk -F '[<>]' '{ print $3}')
#          CONTAINER=$(cat task-definition.json| jq -r ".containerDefinitions[0].image" | awk -F ':' '{print $1}')
#
#          echo "::set-output name=image::$CONTAINER:v$TAG"
#
#      - name: Update image in task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{matrix.service}}
#          image: ${{ steps.retrieve-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{matrix.service}}-${{env.ENVIRONMENT}}
#          cluster: ecs-cluster-01
#          wait-for-service-stability: true
#
#  deploy-production-ap:
#    if: "!contains(github.event.commits[0].message, '[ci skip]')"
#    strategy:
#      matrix:
#        region:
#          - ap-southeast-1
#          - ap-southeast-2
#        service:
#          - jackfruit
#    env:
#      ENVIRONMENT: production
#    runs-on: ubuntu-latest
#    needs: [ deploy-staging-us ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v2
#        with:
#          java-version: "16"
#          cache: "maven"
#          distribution: "zulu"
#      - uses: actions/cache@v1
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ matrix.region }}
#
#      - name: Download task definition
#        env:
#          TASK_DEFINITION: ${{matrix.service}}-${{env.ENVIRONMENT}}
#        run: |
#          aws ecs describe-task-definition --task-definition ${TASK_DEFINITION} --query taskDefinition > task-definition.json
#
#      - name: Retrieve image
#        id: retrieve-image
#        run: |
#          VERSION_FORMAT='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}'
#          mvn -q build-helper:parse-version versions:set -DnewVersion="${VERSION_FORMAT}" versions:commit
#
#          TAG=$(grep \<version\> pom.xml | xargs | awk -F '[<>]' '{ print $3}')
#          CONTAINER=$(cat task-definition.json| jq -r ".containerDefinitions[0].image" | awk -F ':' '{print $1}')
#
#          echo "::set-output name=image::$CONTAINER:v$TAG"
#
#      - name: Update image in task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{matrix.service}}
#          image: ${{ steps.retrieve-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{matrix.service}}-${{env.ENVIRONMENT}}
#          cluster: ecs-cluster-01
#          wait-for-service-stability: false
#
#  deploy-production-eu:
#    if: "!contains(github.event.commits[0].message, '[ci skip]')"
#    strategy:
#      matrix:
#        region:
#          - eu-west-1
#          - eu-west-2
#        service:
#          - jackfruit
#    env:
#      ENVIRONMENT: production
#    runs-on: ubuntu-latest
#    needs: [ deploy-production-ap ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v2
#        with:
#          java-version: "16"
#          cache: "maven"
#          distribution: "zulu"
#      - uses: actions/cache@v1
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ matrix.region }}
#
#      - name: Download task definition
#        env:
#          TASK_DEFINITION: ${{matrix.service}}-${{env.ENVIRONMENT}}
#        run: |
#          aws ecs describe-task-definition --task-definition ${TASK_DEFINITION} --query taskDefinition > task-definition.json
#
#      - name: Retrieve image
#        id: retrieve-image
#        run: |
#          VERSION_FORMAT='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}'
#          mvn -q build-helper:parse-version versions:set -DnewVersion="${VERSION_FORMAT}" versions:commit
#
#          TAG=$(grep \<version\> pom.xml | xargs | awk -F '[<>]' '{ print $3}')
#          CONTAINER=$(cat task-definition.json| jq -r ".containerDefinitions[0].image" | awk -F ':' '{print $1}')
#
#          echo "::set-output name=image::$CONTAINER:v$TAG"
#
#      - name: Update image in task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{matrix.service}}
#          image: ${{ steps.retrieve-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{matrix.service}}-${{env.ENVIRONMENT}}
#          cluster: ecs-cluster-01
#          wait-for-service-stability: false
#
#  deploy-production-us:
#    if: "!contains(github.event.commits[0].message, '[ci skip]')"
#    strategy:
#      matrix:
#        region:
#          - us-east-1
#        service:
#          - jackfruit
#          - noni
#    env:
#      ENVIRONMENT: production
#    runs-on: ubuntu-latest
#    needs: [ deploy-production-ap ]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v2
#        with:
#          java-version: "16"
#          cache: "maven"
#          distribution: "zulu"
#      - uses: actions/cache@v1
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ matrix.region }}
#
#      - name: Download task definition
#        env:
#          TASK_DEFINITION: ${{matrix.service}}-${{env.ENVIRONMENT}}
#        run: |
#          aws ecs describe-task-definition --task-definition ${TASK_DEFINITION} --query taskDefinition > task-definition.json
#
#      - name: Retrieve image
#        id: retrieve-image
#        run: |
#          VERSION_FORMAT='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}'
#          mvn -q build-helper:parse-version versions:set -DnewVersion="${VERSION_FORMAT}" versions:commit
#
#          TAG=$(grep \<version\> pom.xml | xargs | awk -F '[<>]' '{ print $3}')
#          CONTAINER=$(cat task-definition.json| jq -r ".containerDefinitions[0].image" | awk -F ':' '{print $1}')
#
#          echo "::set-output name=image::$CONTAINER:v$TAG"
#
#      - name: Update image in task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{matrix.service}}
#          image: ${{ steps.retrieve-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{matrix.service}}-${{env.ENVIRONMENT}}
#          cluster: ecs-cluster-01
#          wait-for-service-stability: false
